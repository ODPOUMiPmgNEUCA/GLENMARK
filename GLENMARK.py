# -*- coding: utf-8 -*-
"""Soczyste rabaty.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bfU5lwdNa2GOPWmQ9-URaf30VnlBzQC0
"""

#importowanie potrzebnych bibliotek
import os
import openpyxl
import streamlit as st
import pandas as pd
import numpy as np
import altair as alt
import plotly.express as px
import plotly.graph_objects as go
from urllib.request import urlopen
import json
import io
from rapidfuzz import process, fuzz



st.set_page_config(page_title='GLENMARK', layout='wide')




tabs_font_css = """
<style>
div[class*="stTextInput"] label {
  font-size: 26px;
  color: black;
}
div[class*="stSelectbox"] label {
  font-size: 26px;
  color: black;
}
</style>
"""

df = st.file_uploader(
        label = "Wrzuć plik oryginalny raport od działu rozliczeń"
    )
if df:
    df= pd.read_excel(df)
    st.write(df.head())
    
    
lista = pd.read_excel('Lista aptek Glenmark_.xlsx')

df = df[df['Rodzaj promocji'] =='IPRA']

df = df.groupby(['Kod pocztowy', 'Indeks', 'Nazwa towaru']).agg({
    'Ilość sprzedana': 'sum',
    'Wartość sprzedaży': 'sum'
}).reset_index()

df

df['Czy w liście'] = df['Kod pocztowy'].isin(lista['Kod pocztowy'])

df1 = df[df['Czy w liście'] == True]

df2 = df[df['Czy w liście'] == False]

df1 = df1.merge(lista[['Kod pocztowy','SAP','Nazwa apteki','Miejscowość','Ulica','Nr domu']], on='Kod pocztowy', how='left')
df1


kody = lista['Kod pocztowy'].unique().tolist()














'''
# Funkcja do wyszukiwania najbardziej podobnych kodów pocztowych, uwzględniająca pierwsze dwa znaki
def znajdz_podobny_kod(kod, lista_kodow, limit=1):
    prefix = kod[:2]
    # Filtracja kody pocztowe, które zaczynają się od tych samych dwóch znaków
    kody_do_porownania = [k for k in lista_kodow if k.startswith(prefix)]
    
    # Jeśli nie ma dopasowań na podstawie prefiksu, zwróć None
    if not kody_do_porownania:
        return None
    
    # Wyszukiwanie najbardziej podobnego kodu wśród przefiltrowanych
    podobny_kod = process.extractOne(kod, kody_do_porownania, scorer=fuzz.token_sort_ratio)
    return podobny_kod[0] if podobny_kod else None

# Dodanie kolumny z najbardziej podobnym kodem pocztowym
df2['Podobny kod pocztowy'] = df2['Kod pocztowy'].apply(lambda x: znajdz_podobny_kod(x, lista['Kod pocztowy']))

# Opcjonalnie: łączenie danych po znalezionym podobnym kodzie pocztowym
df2_merged = df2.merge(lista[['Kod pocztowy', 'SAP', 'Nazwa apteki', 'Miejscowość', 'Ulica', 'Nr domu']],
                       left_on='Podobny kod pocztowy', right_on='Kod pocztowy', how='left')

# Wyświetlenie wyniku
df2_merged



#TERAZ CYRK
#1 ETAP CYRKU
df2['Prefix'] = df2['Kod pocztowy'].astype(str).str[:5]
lista['Prefix'] = lista['Kod pocztowy'].astype(str).str[:5]

# Dopasowanie kodów pocztowych na podstawie pierwszych dwóch cyfr
df2 = df2.merge(lista[['Kod pocztowy', 'SAP', 'Nazwa apteki', 'Miejscowość', 'Ulica', 'Nr domu', 'Prefix']],
                       left_on='Prefix', right_on='Prefix', how='left', suffixes=('_df2', '_lista'))

# Usuwamy duplikaty, pozostawiając tylko pierwsze dopasowanie
df2 = df2.drop_duplicates(subset=['Kod pocztowy_df2'])

df2

#2 ETAP CYRKU

df2 = df2[df2['Kod pocztowy_lista'].isna()]
df2 = df2.drop('Prefix', errors = 'ignore')


df2['Prefix'] = df2['Kod pocztowy_df2'].astype(str).str[:4]
lista = lista.drop('Prefix', errors = 'ignore')
lista['Prefix'] = lista['Kod pocztowy'].astype(str).str[:4]

# Dopasowanie kodów pocztowych na podstawie pierwszych dwóch cyfr
df2 = df2.merge(lista[['Kod pocztowy', 'SAP', 'Nazwa apteki', 'Miejscowość', 'Ulica', 'Nr domu', 'Prefix']],
                       left_on='Prefix', right_on='Prefix', how='left', suffixes=('_df2', '_lista'))

# Usuwamy duplikaty, pozostawiając tylko pierwsze dopasowanie
df2 = df2.drop_duplicates(subset=['Kod pocztowy_df2'])

df2

'''













